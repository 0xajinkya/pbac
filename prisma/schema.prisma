generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SQL_URL")
}

model user {
  id         String   @id @db.VarChar(20)
  first_name String?  @db.VarChar(32)
  last_name  String?  @db.VarChar(32)
  email      String   @unique @db.VarChar(128)
  password   String   @db.VarChar(128)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  deleted    Boolean? @default(false)

  active_organization_id String? @db.VarChar(20)
  staff                  staff[]

  organization organization[]

  blog_comment blog_comment[]
}

model organization {
  id            String   @id @db.VarChar(20)
  name          String   @db.VarChar(32)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  created_by_id String   @db.VarChar(20)
  deleted       Boolean? @default(false)

  staff      staff[]
  created_by user    @relation(fields: [created_by_id], references: [id], onDelete: Cascade)

  blog blog[]
}

model staff {
  id              String   @id @db.VarChar(20)
  user_id         String   @db.VarChar(20)
  organization_id String   @db.VarChar(20)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)
  role_id         String   @db.VarChar(20)
  deleted         Boolean? @default(false)

  user         user         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  role         role         @relation(fields: [role_id], references: [id], onDelete: Cascade)

  blog blog[]

  blog_review blog_review[]

  @@unique([organization_id, user_id])
}

model role {
  id    String  @id @db.VarChar(20)
  name  String  @unique(map: "role_name") @db.VarChar(32)
  staff staff[]
}

model blog {
  id         String   @id @db.VarChar(20)
  title      String   @db.VarChar(32)
  content    String   @db.VarChar(1024)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted    Boolean? @default(false)

  published Boolean @default(false)

  organization_id String       @db.VarChar(20)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  created_by_staff_id String @db.VarChar(20)
  created_by_staff    staff  @relation(fields: [created_by_staff_id], references: [id], onDelete: Cascade)

  blog_comment blog_comment[]

  blog_review blog_review[]
}

model blog_comment {
  id         String   @id @db.VarChar(20)
  comment    String   @db.VarChar(1024)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted    Boolean? @default(false)

  blog_id String @db.VarChar(20)
  blog    blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade)

  created_by_user_id String @db.VarChar(20)
  created_by_user    user   @relation(fields: [created_by_user_id], references: [id], onDelete: Cascade)
}

model blog_review {
  id         String   @id @db.VarChar(20)
  review     String   @db.VarChar(1024)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted    Boolean? @default(false)

  blog_id String @db.VarChar(20)
  blog    blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade)

  created_by_staff_id String @db.VarChar(20)
  created_by_staff    staff  @relation(fields: [created_by_staff_id], references: [id], onDelete: Cascade)
}
